#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (C) 2019-2023, INRIA
#
# This file is part of Openwind.
#
# Openwind is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Openwind is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Openwind.  If not, see <https://www.gnu.org/licenses/>.
#
# For more informations about authors, see the CONTRIBUTORS file

"""
This example shows how to specify the emplacement of valve and the geometry of
the corresponding deviation pipe.
"""

import numpy as np
from matplotlib import pyplot as plt

from openwind import InstrumentGeometry


# %% Describe the geometry

# In brass instruments, a valve deviates the wave travel from a pipe
# (generally a small pipe into the valve mechanism) to a deviation pipe.
# In openWind, the default pipe is assumed to be a part of the main bore.
# To describe a valve system it is necessary to indicate:
# - the location of the deviation point on the main bore
# - the location of the reconnection point
# - the shape of the deviation pipe ( currently only cylindrical deviation pipe
# are interfaced), described by its:
#     * radius
#     * length
#
# These quantities are specify in a file similar to the hole file
# (see :py:doc:`Example 2 <technical.Ex2_Handling_side_holes>`), with five
# columns with label:
#  - 'variety' : specifying that it is a valve
#  - 'label': the name of the valve used in the fingering chart
#  - 'position': the location of the first deviation point on the main bore (in meter)
#  - 'reconnection': the location of the reconnection point of the main bore (in meter)
#  - 'radius': the radius of the deviation pipe  (in meter)
#  - 'length': the length of the deviation pipe in meter (similar to 'chimney' for holes)

main_bore_geom = [[0,  .1, 5e-3, 3e-3, 'linear'],
                  [.1, 1.3, 5e-3, 5e-2, 'bessel', .4]]
valves_geom = [['variety',  'label',    'position', 'reconnection', 'radius',   'length'],
               ['valve',    'piston1',   0.1,       .125,            3e-3,       0.11],
               ['valve',    'piston2',  0.15,        .155,           5e-3,       0.07],
               ['valve',    'piston3',  0.29,       .32,            2e-3,       0.22],]

# The Fingering chart is similar to the one for hole. Here:
# - 'x' indicates a "depressed" or "press down" valve
# - 'o' indicates a "raised" or "open" valve
# - '0.5' indicates a semi-pressed valve (why not!)
fing_chart = [['label',   'note0', 'note1', 'note2', 'note3', 'strange'],
              ['piston1', 'o',      'x',    'x',       'o',   'o'],
              ['piston2', 'o',      'x',    'o',       'x',   '0.5'],
              ['piston3', 'o',      'x',    'x',       'x',   'x']]


# The geometry is generated by placing the valves data instead the holes data.
# It is also possible to plot the geometry, the deviation pipe being plotted
# parallel to the main bore.
my_geom = InstrumentGeometry(main_bore_geom, valves_geom, fing_chart)
print(my_geom)
my_geom.plot_InstrumentGeometry()
plt.title('A brass with three valves')


# %% Mixing holes and valves

# It is also possible to combined valve and hole in the same file. Just specify
# 'valve' or 'hole' in the 'variety' column and for hole, put blank data in the
# column 'reconnection'. ('length' and 'chimney' being the same column)
holes_valves_geom = [['variety',  'label',    'position', 'radius',   'length',  'reconnection'],
                     ['hole',     'hole0',    0.12,       0.003,      0.005,     '/'],
                     ['valve',    'piston0',  0.1,        3e-3,       0.1,       0.15],
                     ['valve',    'piston1',  0.13,       3e-3,       0.05,      0.23],
                     ]
fing_chart_holes_valves = [['label',     'A', 'B', 'C', 'D', 'E'],
                           ['hole0',     'o', 'x', 'x', 'o', 'x'],
                           ['piston0',   'o', 'x', 'o', 'x', '0.5'],
                           ['piston1',   'x', 'x', 'o', 'x', 'x']]
# Because the hole is on the "default" pipe, fingerings 'B' and 'D' should
# give similar results


freq = np.linspace(1, 3e3, 1000)
my_strange_geom = InstrumentGeometry(main_bore_geom, holes_valves_geom, fing_chart_holes_valves)
my_strange_geom.plot_InstrumentGeometry()
plt.suptitle('A strange instrument mixing holes and valves')
# %% Simulations

# For simulations in temporal or frequential domain, the computation is exactly similar to the ones with side holes.

plt.show()
